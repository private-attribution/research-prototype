#!/usr/bin/env bash
# This is a pre-commit hook that validates code formatting.
#
# Install this by running the script with an argument of "install",
# which installs a symlink to .git/hooks/precommit:
# $ ln -s ../../hooks/pre-commit .git/hooks/pre-commit

root="$(git rev-parse --show-toplevel 2>/dev/null)"

set -e

# Some sanity checking.
hash cargo
[[ -n "$root" ]]

# Installation.
if [[ "$1" == "install" ]]; then
    hook="$root"/.git/hooks/pre-commit
    if [[ ! -e "$hook" ]]; then
        ln -s ../../pre-commit "$hook"
        echo "Installed git pre-commit hook at $hook"
    else
        echo "Hook already installed"
    fi
    exit
fi

# Check formatting.
stashfile=$(mktemp .pre-commit.stashXXXXXX)
trap 'set +e;git stash pop -q; rm -f "$stashfile"' EXIT
git stash push -k -u -q -m "pre-commit stash"
if ! errors=($(cargo fmt -- --check -l)); then
    echo "Formatting errors found."
    echo "Run \`cargo fmt\` to fix the following files:"
    for err in "${errors[@]}"; do
        echo "  $err"
    done
    exit 1
fi

error() {
   echo "-----------------------"
   echo "$@"
   exit 1
}

cargo clippy --tests -- -D warnings --D clippy::pedantic || error "Clippy errors"

cargo test || error "Test failures"

VENV="$root/.venv/bin"
if ! [[ -d "$VENV" ]]; then
    python3 -m venv .venv
    "$VENV/pip3" install -r "$root/requirements.txt"
fi

"$VENV/flake518" . || error "Python flake8 formatting errors."

"$VENV/black" --check --diff . || error "Python Black formatting errors. Run \`black .\` to fix."

"$VENV/isort" --check --diff . || error "Python isort import ordering errors. Run \`isort .\` to fix."
